library(viridis)
magma(3)
install.packages("devtools")
source("https://bioconductor.org/biocLite.R")
biocLite("Biostrings")
library(devtools)
install_github("jtlovell/motifHalliiV2")
library(motifHalliiV2)
v2geneID<-c("Pahal.J02145","Pahal.J01516","Pahal.H01249","Pahal.D01315","Pahal.J00094","Pahal.D00330","Pahal.D02670","Pahal.D01649","Pahal.D02828","Pahal.J00146","Pahal.C04014","Pahal.H01253","Pahal.D00532","Pahal.J00293","Pahal.F02021","Pahal.F02121","Pahal.F01847","Pahal.F01958", "Pahal.F00534", "Pahal.B02910")
?calcMotifEnrichment
test<-calcMotifEnrichment(v2geneID[1:10], FDR.method="p.adjust", method="none")
?motifEnrichment
test<-calcMotifEnrichment(v2geneID[1:10], FDR.method="p.adjust", method="bonferroni")
library(motifHalliiV2)
test<-calcMotifEnrichment(v2geneID[1:10], FDR.method="qvalue")
test<-calcMotifEnrichment(v2geneID[1:10], FDR.method="p.adjust", method="bonferroni")
test<-calcMotifEnrichment(v2geneID[1:10], FDR.method="qvalue")
?motifEnrichment
??motifEnrichment
test<-calcMotifEnrichment(v2geneID[1:10], FDR.method="qvalue")
test<-calcMotifEnrichment(v2geneID[1:10], FDR.method="p.adjust", method="bonferroni")
library(motifHalliiV2)
??calcMotifEnrichment
?calcMotifEnrichment
test<-calcMotifEnrichment(v2geneID[1:10], FDR.method="p.adjust", method="none")
?calcMotifEnrichment
?motifEnrichment
library(PWMEnrich)
install.packages(PWMEnrich)
install.packages('PWMEnrich')
biocLite("PWMEnrich")
library(PWMEnrich)
?calcMotifEnrichment
test<-calcMotifEnrichment(v2geneID[1:10], FDR.method="p.adjust", method="none")
library(qvalue)
biocLite("qvalue")
library(qvalue)
library(Biostrings)
test<-calcMotifEnrichment(v2geneID[1:10], FDR.method="p.adjust", method="none")
test<-calcMotifEnrichment(v2geneID[1:10], FDR.method="p.adjust", method="bonferroni")
test<-calcMotifEnrichment(v2geneID[1:10], FDR.method="qvalue")
plotSigMotif(test, pdf.file="~/Desktop/test.pdf", threshold=0.5)
plotSigMotif(test, threshold=0.5)
getwd()
writeSigMotifs(test,csv.file="test.csv", threshold=0.5)
setwd("c:/Users/Lohman/Documents/GitHub/TagSeq-Improvements-and-benchmarking-paper")
library(ggplot2)
source('summarySE.R')
library(viridis)
source("RedingPlot.R")
counts <- read.csv("ERCCTruTagCounts.csv")
head(counts)
counts <- na.omit(counts)
logs <- log(counts[,c(4:ncol(counts))]+1,10) #log base 10 of seq counts +1
logs$ercc_ref <- log(counts$ercc_ref,10) #log base 10 of ercc concentrations
table(is.na(logs))
min(logs$ercc_ref)
logs$bin <- cut(logs$ercc_ref,seq(min(logs$ercc_ref)-0.1,max(logs$ercc_ref)+0.1,(max(logs$ercc_ref)-min(logs$ercc_ref))/4)) #divides data into 4 abundance classes and adds last column to tell which bin it's in
logs$bin[1] <- logs$bin[2] #small correction to remove NA
logs$bin <- as.numeric(logs$bin) #converts the bin range to bin number
str(logs)
windows()
par(mai = c(0.4,0.3,0.3,0.3))
adj_r <- c()
res <- c() #makes empty vector
par(mfrow=c(2,4)) #plotting window
n <- "Gosling_1_TagSeq" #sets first sample followed by loop for plotting others
for (i in 1:8){
n <- names(logs)[i]
if (i<5) { col1 <- viridis(3)[2] } else { col1 <- viridis(3)[1]}
col <- paste(substr(col1, 1, 7), "FE", sep = "")
plot(counts[,n] ~ counts[,"ercc_ref"],log="xy",pch=16,col=col,cex=1.3,main=n,xlab="Spike Concentration",ylab="Count",mgp=c(2.3,1,0), cex.lab = 1.5)
sub <- logs[logs[,n]>1,]
l <- lm(sub[,n]~sub$ercc_ref) #linear model which regresses observed counts onto expected
l <- lm(logs[,n]~logs$ercc_ref)	#same linear model as above
abline(l,lwd = 1.5) #but plotted this time
temp_r <- summary(l)
adj_r <- c(adj_r, temp_r[9])
res <- cbind(res,l$residuals)
}
windows()
par(mai = c(0.4,0.3,0.3,0.3))
adj_r <- c()
res <- c() #makes empty vector
par(mfrow=c(2,4)) #plotting window
n <- "Gosling_1_TagSeq" #sets first sample followed by loop for plotting others
for (i in 1:8){
n <- names(logs)[i]
if (i<5) { col1 <- viridis(3)[2] } else { col1 <- viridis(3)[1]}
col <- paste(substr(col1, 1, 7), "FE", sep = "")
plot(counts[,n] ~ counts[,"ercc_ref"],log="xy",pch=16,col=col,cex=1.3,main=n,xlab="Spike Concentration",ylab="Count",mgp=c(2.3,1,0), cex.lab = 1.5)
sub <- logs[logs[,n]>1,]
l <- lm(sub[,n]~sub$ercc_ref) #linear model which regresses observed counts onto expected
l <- lm(logs[,n]~logs$ercc_ref)	#same linear model as above
abline(l,lwd = 1.5) #but plotted this time
temp_r <- summary(l)
adj_r <- c(adj_r, temp_r[9])
res <- cbind(res,l$residuals)
}
#MS Figure 1
windows()
par(mai = c(0.4,0.3,0.3,0.3))
adj_r <- c()
res <- c() #makes empty vector
par(mfrow=c(2,4)) #plotting window
n <- "Gosling_1_TagSeq" #sets first sample followed by loop for plotting others
for (i in 1:8){
n <- names(logs)[i]
if (i<5) { col1 <- viridis(3)[2] } else { col1 <- viridis(3)[1]}
col <- paste(substr(col1, 1, 7), "FE", sep = "")
plot(counts[,n] ~ counts[,"ercc_ref"],log="xy",pch=16,col=col,cex=1.3,main=n,xlab="Spike Concentration",ylab="Count",mgp=c(2.3,1,0), cex.lab = 1.5)
sub <- logs[logs[,n]>1,]
l <- lm(sub[,n]~sub$ercc_ref) #linear model which regresses observed counts onto expected
l <- lm(logs[,n]~logs$ercc_ref)	#same linear model as above
abline(l,lwd = 1.5) #but plotted this time
temp_r <- summary(l)
adj_r <- c(adj_r, temp_r[9])
res <- cbind(res,l$residuals)
}
windows()
par(mai = c(0.4,0.3,0.3,0.3))
adj_r <- c()
res <- c() #makes empty vector
par(mfrow=c(2,4)) #plotting window
n <- "Gosling_1_TagSeq" #sets first sample followed by loop for plotting others
for (i in 1:8){
n <- names(logs)[i]
if (i<5) { col1 <- viridis(3)[2] } else { col1 <- viridis(3)[1]}
col <- paste(substr(col1, 1, 7), "FE", sep = "")
plot(counts[,n] ~ counts[,"ercc_ref"],log="xy",pch=16,col=col,cex=1.3,main=n,xlab="Spike Concentration",ylab="Count",mgp=c(2.3,1,0), cex.lab = 1.5, ylim c(1,10000))
sub <- logs[logs[,n]>1,]
l <- lm(sub[,n]~sub$ercc_ref) #linear model which regresses observed counts onto expected
l <- lm(logs[,n]~logs$ercc_ref)	#same linear model as above
abline(l,lwd = 1.5) #but plotted this time
temp_r <- summary(l)
adj_r <- c(adj_r, temp_r[9])
res <- cbind(res,l$residuals)
}
windows()
par(mai = c(0.4,0.3,0.3,0.3))
adj_r <- c()
res <- c() #makes empty vector
par(mfrow=c(2,4)) #plotting window
n <- "Gosling_1_TagSeq" #sets first sample followed by loop for plotting others
for (i in 1:8){
n <- names(logs)[i]
if (i<5) { col1 <- viridis(3)[2] } else { col1 <- viridis(3)[1]}
col <- paste(substr(col1, 1, 7), "FE", sep = "")
plot(counts[,n] ~ counts[,"ercc_ref"],log="xy",pch=16,col=col,cex=1.3,main=n,xlab="Spike Concentration",ylab="Count",mgp=c(2.3,1,0), cex.lab = 1.5, ylim = c(1,10000))
sub <- logs[logs[,n]>1,]
l <- lm(sub[,n]~sub$ercc_ref) #linear model which regresses observed counts onto expected
l <- lm(logs[,n]~logs$ercc_ref)	#same linear model as above
abline(l,lwd = 1.5) #but plotted this time
temp_r <- summary(l)
adj_r <- c(adj_r, temp_r[9])
res <- cbind(res,l$residuals)
}
windows()
par(mai = c(0.4,0.3,0.3,0.3))
adj_r <- c()
res <- c() #makes empty vector
par(mfrow=c(2,4)) #plotting window
n <- "Gosling_1_TagSeq" #sets first sample followed by loop for plotting others
for (i in 1:8){
n <- names(logs)[i]
if (i<5) { col1 <- viridis(3)[2] } else { col1 <- viridis(3)[1]}
col <- paste(substr(col1, 1, 7), "FE", sep = "")
plot(counts[,n] ~ counts[,"ercc_ref"],log="xy",pch=16,col=col,cex=1.3,main=n,xlab="Spike Concentration",ylab="Count",mgp=c(2.3,1,0), cex.lab = 1.5, ylim = c(1,100000))
sub <- logs[logs[,n]>1,]
l <- lm(sub[,n]~sub$ercc_ref) #linear model which regresses observed counts onto expected
l <- lm(logs[,n]~logs$ercc_ref)	#same linear model as above
abline(l,lwd = 1.5) #but plotted this time
temp_r <- summary(l)
adj_r <- c(adj_r, temp_r[9])
res <- cbind(res,l$residuals)
}
windows()
par(mai = c(0.4,0.3,0.3,0.3))
adj_r <- c()
res <- c() #makes empty vector
par(mfrow=c(2,4)) #plotting window
n <- "Gosling_1_TagSeq" #sets first sample followed by loop for plotting others
for (i in 1:8){
n <- names(logs)[i]
if (i<5) { col1 <- viridis(3)[2] } else { col1 <- viridis(3)[1]}
col <- paste(substr(col1, 1, 7), "FE", sep = "")
plot(counts[,n] ~ counts[,"ercc_ref"],log="xy",pch=16,col=col,cex=1.3,main=n,xlab="Spike Concentration",ylab="Count",mgp=c(2.3,1,0), cex.lab = 1.5, ylim = c(1,1000000))
sub <- logs[logs[,n]>1,]
l <- lm(sub[,n]~sub$ercc_ref) #linear model which regresses observed counts onto expected
l <- lm(logs[,n]~logs$ercc_ref)	#same linear model as above
abline(l,lwd = 1.5) #but plotted this time
temp_r <- summary(l)
adj_r <- c(adj_r, temp_r[9])
res <- cbind(res,l$residuals)
}
setwd("c:/Users/Lohman/Documents/GitHub/TagSeq-Improvements-and-benchmarking-paper")
library(ggplot2)
source('summarySE.R')
library(viridis)
source("RedingPlot.R")
counts <- read.csv("ERCCTruTagCounts.csv")
head(counts)
counts <- na.omit(counts)
logs <- log(counts[,c(4:ncol(counts))]+1,10) #log base 10 of seq counts +1
logs$ercc_ref <- log(counts$ercc_ref,10) #log base 10 of ercc concentrations
table(is.na(logs))
min(logs$ercc_ref)
logs$bin <- cut(logs$ercc_ref,seq(min(logs$ercc_ref)-0.1,max(logs$ercc_ref)+0.1,(max(logs$ercc_ref)-min(logs$ercc_ref))/4)) #divides data into 4 abundance classes and adds last column to tell which bin it's in
logs$bin[1] <- logs$bin[2] #small correction to remove NA
logs$bin <- as.numeric(logs$bin) #converts the bin range to bin number
str(logs)
#MS Figure 1
windows()
par(mai = c(0.4,0.3,0.3,0.3))
adj_r <- c()
res <- c() #makes empty vector
par(mfrow=c(2,4)) #plotting window
n <- "Gosling_1_TagSeq" #sets first sample followed by loop for plotting others
for (i in 1:8){
n <- names(logs)[i]
if (i<5) { col1 <- viridis(3)[2] } else { col1 <- viridis(3)[1]}
col <- paste(substr(col1, 1, 7), "FE", sep = "")
plot(counts[,n] ~ counts[,"ercc_ref"],log="xy",pch=16,col=col,cex=1.3,main=n,xlab="Spike Concentration",ylab="Count",mgp=c(2.3,1,0), cex.lab = 1.5, ylim = c(1,1000000))
sub <- logs[logs[,n]>1,]
l <- lm(sub[,n]~sub$ercc_ref) #linear model which regresses observed counts onto expected
l <- lm(logs[,n]~logs$ercc_ref)	#same linear model as above
abline(l,lwd = 1.5) #but plotted this time
temp_r <- summary(l)
adj_r <- c(adj_r, temp_r[9])
res <- cbind(res,l$residuals)
}
adj_r #a vector which contains the adjusted R squared for each sample
adj_r <- unlist(as.vector(adj_r))
tag <- adj_r[1:4]
tru <- adj_r[5:8]
mean(tag)
mean(tru)
tResult1 <- t.test(tag,tru, paired = TRUE)
tResult1
#Plot to show difference in adjusted R squared between tru and tag
windows()
simple(list(tru,tag), ylim = c(0.77,0.9), ylab = "Rho", xlab = "Library Construction Method", lab = c("TotalRNAseq", "TagSeq"))
simple(list(tru,tag), cex = 2, ylim = c(0.77,0.9), ylab = "Rho", xlab = "Library Construction Method", lab = c("TotalRNAseq", "TagSeq"))
windows()
simple(list(tru,tag), cex = 2, ylim = c(0.77,0.9), ylab = "Rho", xlab = "Library Construction Method", lab = c("TotalRNAseq", "TagSeq"))
windows()
simple(list(tru,tag), cex = 4, ylim = c(0.77,0.9), ylab = "Rho", xlab = "Library Construction Method", lab = c("TotalRNAseq", "TagSeq"))
windows()
simple(list(tru,tag), cex = 6, ylim = c(0.77,0.9), ylab = "Rho", xlab = "Library Construction Method", lab = c("TotalRNAseq", "TagSeq"))
windows()
simple(list(tru,tag), cex = 10, ylim = c(0.77,0.9), ylab = "Rho", xlab = "Library Construction Method", lab = c("TotalRNAseq", "TagSeq"))
windows()
simple(list(tru,tag), cex = 100, ylim = c(0.77,0.9), ylab = "Rho", xlab = "Library Construction Method", lab = c("TotalRNAseq", "TagSeq"))
